---
nvim_profile_dir_name: "nvim-profiles"
nvim_xdg_profile_dir: 
  config: "{{ xdg_config_dir }}/{{ nvim_profile_dir_name }}"
  share: "{{ xdg_share_dir }}/{{ nvim_profile_dir_name }}"
  cache: "{{ xdg_cache_dir }}/{{ nvim_profile_dir_name }}"
nvim_default_editor_options:
  - "vim.opt.termguicolors = true"
  - "vim.opt.hidden = true"
  - "vim.opt.magic = true"
  - "vim.opt.virtualedit = 'block'"
  - "vim.opt.clipboard = 'unnamedplus'"
  - "vim.opt.wildignorecase = true"
  - "vim.opt.swapfile = false"
  - "vim.opt.directory = '{{ nvim_cache_dir }}' .. 'swap/'"
  - "vim.opt.undodir = '{{ nvim_cache_dir }}' .. 'undo/'"
  - "vim.opt.backupdir = '{{ nvim_cache_dir }}' .. 'backup/'"
  - "vim.opt.viewdir = '{{ nvim_cache_dir }}' .. 'view/'"
  - "vim.opt.spellfile = '{{ nvim_cache_dir }}' .. 'spell/en.uft-8.add'"
  - "vim.opt.history = 2000"
  - "vim.opt.timeout = true"
  - "vim.opt.ttimeout = true"
  - "vim.opt.timeoutlen = 500"
  - "vim.opt.ttimeoutlen = 10"
  - "vim.opt.updatetime = 100"
  - "vim.opt.redrawtime = 1500"
  - "vim.opt.ignorecase = true"
  - "vim.opt.smartcase = true"
  - "vim.opt.infercase = true"
  - "vim.opt.grepformat = '%f:%l:%c:%m,%f:%l:%m'"
  - "vim.opt.grepprg = '{{ rg_exe }} --vimgrep --no-heading --smart-case'"
  - "vim.opt.completeopt = 'menu,menuone,noselect'"
  - "vim.opt.showmode = false"
  - "vim.opt.shortmess = 'aoOTIcF'"
  - "vim.opt.scrolloff = 2"
  - "vim.opt.sidescrolloff = 5"
  - "vim.opt.ruler = false"
  - "vim.opt.showtabline = 0"
  - "vim.opt.winwidth = 30"
  - "vim.opt.pumheight = 15"
  - "vim.opt.showcmd = false"
  - "vim.opt.cmdheight = 0"
  - "vim.opt.laststatus = 3"
  - "vim.opt.list = true"
  - "vim.opt.listchars = 'tab:»·,nbsp:+,trail:·,extends:→,precedes:←'"
  - "vim.opt.pumblend = 10"
  - "vim.opt.winblend = 10"
  - "vim.opt.undofile = true"
  - "vim.opt.smarttab = true"
  - "vim.opt.expandtab = true"
  - "vim.opt.autoindent = true"
  - "vim.opt.tabstop = 2"
  - "vim.opt.shiftwidth = 2"
  - "vim.opt.linebreak = true"
  - "vim.opt.whichwrap = 'h,l,<,>,[,],~'"
  - "vim.opt.breakindentopt = 'shift:2,min:20'"
  - "vim.opt.showbreak = '↳  '"
  - "vim.opt.foldlevelstart = 99"
  - "vim.opt.foldmethod = 'marker'"
  - "vim.opt.number = true"
  - "vim.opt.signcolumn = 'yes'"
  - "vim.opt.spelloptions = 'camel'"
  - "vim.opt.textwidth = 100"
  - "vim.opt.colorcolumn = '100'"
  - "vim.g.python3_host_prog = '{{ nvim_python_exe }}'"
  - "-- vim.opt.conceallevel = 2"
  - "-- vim.opt.concealcursor = 'niv'"
nvim_default_editor_options_file: "{{ nvim_default_editor_options | join('\n') }}"
nvim_default_keymap_options:
  - "vim.g.mapleader = ' '"
  - "vim.g.maplocalleader = ' '"
  - "vim.api.nvim_set_keymap('', '<Space>', '<Nop>', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-]>', '<C-\\\\><C-n> ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-h>', '<C-\\\\><C-n><C-W>h ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-j>', '<C-\\\\><C-n><C-W>j ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-k>', '<C-\\\\><C-n><C-W>k ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-l>', '<C-\\\\><C-n><C-W>l ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('n', 'k', \"v:count == 0 ? 'gk' : 'k'\", { noremap = true, expr = true, silent = true })"
  - "vim.api.nvim_set_keymap('n', 'j', \"v:count == 0 ? 'gj' : 'j'\", { noremap = true, expr = true, silent = true })"
nvim_default_keymap_options_file: "{{ nvim_default_keymap_options | join('\n') }}"
nvim_default_ui_options:
  - "vim.opt.sessionoptions = 'buffers,curdir,folds,help,tabpages,winsize,winpos,terminal'"
nvim_default_ui_options_file: "{{ nvim_default_ui_options | join('\n') }}"
nvim_default_plugins:
  legendary:
    packer:
      - "use { 'mrjones2014/legendary.nvim',"
      - "  requires = {"
      - "    'folke/which-key.nvim',"
      - "  },"
      - "}"
    config:
      - "require('which-key').setup({"
      - "  triggers = {'<leader>', 'g'},"
      - "  triggers_blacklist = {"
      - "    n = { '<C-w>', '<C-g>' },"
      - "    v = { '<C-w>', '<C-g>' },"
      - "  },"
      - "})"
    keymaps:
      - "{ '<CR>', {"
      - "    n = ':',"
      - "  },"
      - "  description = 'Enter Ex Commands',"
      - "},"
  telescope:
    packer:
      - "use { 'nvim-telescope/telescope-fzf-native.nvim',"
      - "  requires = {"
      - "    'nvim-telescope/telescope.nvim',"
      - "    'nvim-lua/plenary.nvim',"
      - "    'nvim-lua/popup.nvim',"
      - "    'TC72/telescope-tele-tabby.nvim',"
      - "  },"
      - "  run = 'make',"
      - "}"
      - "use { 'nvim-telescope/telescope-ui-select.nvim' }"
    config:
      - "require('telescope').setup({"
      - "  defaults = {"
      - "    theme = 'dropdown',"
      - "    mappings = {"
      - "      i = {"
      - "        ['<C-u>'] = false,"
      - "        ['<C-d>'] = false,"
      - "      },"
      - "    },"
      - "  },"
      - "  extensions = {"
      - "    -- ['ui-select'] = {"
      - "    --   require('telescope.themes').get_dropdown {"
      - "    --     -- even more opts"
      - "    --   }"
      - ""
      - "    --   -- pseudo code / specification for writing custom displays, like the one"
      - "    --   -- for 'codeactions'"
      - "    --   -- specific_opts = {"
      - "    --   --   [kind] = {"
      - "    --   --     make_indexed = function(items) -> indexed_items, width,"
      - "    --   --     make_displayer = function(widths) -> displayer"
      - "    --   --     make_display = function(displayer) -> function(e)"
      - "    --   --     make_ordinal = function(e) -> string"
      - "    --   --   },"
      - "    --   --   -- for example to disable the custom builtin 'codeactions' display"
      - "    --   --      do the following"
      - "    --   --   codeactions = false,"
      - "    --   -- }"
      - "    -- },"
      - "    tele_tabby = {"
      - "      use_highlighter = true,"
      - "    },"
      - "  }"
      - "})"
      - "require('telescope').load_extension('ui-select')"
      - "require('telescope').load_extension('fzf')"
    keymaps:
      - "{ '<leader>ff', {"
      - "    n = '<cmd>lua require(\\'telescope.builtin\\').find_files({previewer = false})<CR>',"
      - "  },"
      - "  description = 'Telescope: Find Files',"
      - "},"
      - "{ '<leader>fb', {"
      - "    n = '<cmd>lua require(\\'telescope.builtin\\').buffers()<CR>',"
      - "  },"
      - "  description = 'Telescope: Find Open Buffers',"
      - "},"
      - "{ '<leader>fh', {"
      - "    n = '<cmd>lua require(\\'telescope.builtin\\').help_tags()<CR>',"
      - "  },"
      - "  description = 'Telescope: Find Help Tags',"
      - "},"
      - "{ '<leader>ft', {"
      - "    n = '<cmd>Telescope tele_tabby list<CR>',"
      - "  },"
      - "  description = 'Telescope: Search Tabs',"
      - "},"
      - "{ '_', {"
      - "    n = '<cmd>lua require(\\'telescope.builtin\\').grep_string()<CR>',"
      - "  },"
      - "  description = 'Telescope: Grep String(Cursor Word)',"
      - "},"
      - "{ '<leader>q', {"
      - "    n = '<cmd>lua require(\\'telescope-custom\\').live_grep_in_folder()<CR>',"
      - "  },"
      - "  description = 'Telescope: Selective Live Grep Project',"
      - "},"
      - "{ '<leader>Q', {"
      - "    n = '<cmd>lua require(\\'telescope.builtin\\').live_grep()<CR>',"
      - "  },"
      - "  description = 'Telescope: Live Grep Project',"
      - "},"
      - "{ '<leader>/', {"
      - "    n = '<cmd>lua require(\\'telescope.builtin\\').current_buffer_fuzzy_find()<CR>',"
      - "  },"
      - "  description = 'Telescope: Find in Current Buffer',"
      - "},"
      - "{ '<leader>?', {"
      - "    n = '<cmd>lua require(\\'telescope.builtin\\').oldfiles()<CR>',"
      - "  },"
      - "  description = 'Telescope: Old Files',"
      - "},"
nvim_xdg_profiles:
  musl:
    name: musl
# cosynvim:
#   name: cosynvim
# basicide:
#   name: basic-ide
# kickstart:
#   name: kickstart
