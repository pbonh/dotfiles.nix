---
nvim_profile_dir_name: "nvim-profiles"
nvim_xdg_profile_dir: 
  config: "{{ xdg_config_dir }}/{{ nvim_profile_dir_name }}"
  share: "{{ xdg_share_dir }}/{{ nvim_profile_dir_name }}"
  cache: "{{ xdg_cache_dir }}/{{ nvim_profile_dir_name }}"
nvim_default_editor_options:
  - "vim.g.loaded_netrw = 1"
  - "vim.g.loaded_netrwPlugin = 1"
  - "vim.opt.shell= '{{ nvim_shell }}'"
  - "vim.opt.termguicolors = true"
  - "vim.opt.hidden = true"
  - "vim.opt.magic = true"
  - "vim.opt.virtualedit = 'block'"
  - "vim.opt.clipboard = 'unnamedplus'"
  - "vim.opt.wildignorecase = true"
  - "vim.opt.swapfile = false"
  - "vim.opt.directory = '{{ nvim_cache_dir }}' .. 'swap/'"
  - "vim.opt.undodir = '{{ nvim_cache_dir }}' .. 'undo/'"
  - "vim.opt.backupdir = '{{ nvim_cache_dir }}' .. 'backup/'"
  - "vim.opt.viewdir = '{{ nvim_cache_dir }}' .. 'view/'"
  - "vim.opt.spellfile = '{{ nvim_cache_dir }}' .. 'spell/en.uft-8.add'"
  - "vim.opt.history = 2000"
  - "vim.opt.timeout = true"
  - "vim.opt.ttimeout = true"
  - "vim.opt.timeoutlen = 100"
  - "vim.opt.ttimeoutlen = 10"
  - "vim.opt.updatetime = 100"
  - "vim.opt.redrawtime = 1500"
  - "vim.opt.ignorecase = true"
  - "vim.opt.smartcase = true"
  - "vim.opt.infercase = true"
  - "vim.opt.grepformat = '%f:%l:%c:%m,%f:%l:%m'"
  - "vim.opt.grepprg = '{{ rg_exe }} --vimgrep --no-heading --smart-case'"
  - "vim.opt.completeopt = 'menu,menuone,noselect'"
  - "vim.opt.showmode = false"
  - "vim.opt.shortmess = 'aoOTIcF'"
  - "vim.opt.scrolloff = 2"
  - "vim.opt.sidescrolloff = 5"
  - "vim.opt.ruler = false"
  - "vim.opt.showtabline = 0"
  - "vim.opt.winwidth = 10"
  - "vim.opt.pumheight = 15"
  - "vim.opt.showcmd = false"
  - "vim.opt.cmdheight = 0"
  - "vim.opt.laststatus = 3"
  - "vim.opt.list = true"
  - "vim.opt.listchars = 'tab:»·,nbsp:+,trail:·,extends:→,precedes:←'"
  - "vim.opt.pumblend = 10"
  - "vim.opt.winblend = 10"
  - "vim.opt.undofile = true"
  - "vim.opt.smarttab = true"
  - "vim.opt.expandtab = true"
  - "vim.opt.autoindent = true"
  - "vim.opt.tabstop = 2"
  - "vim.opt.shiftwidth = 2"
  - "vim.opt.linebreak = true"
  - "vim.opt.whichwrap = 'h,l,<,>,[,],~'"
  - "vim.opt.breakindentopt = 'shift:2,min:20'"
  - "vim.opt.showbreak = '↳  '"
  - "vim.opt.foldlevelstart = 99"
  - "vim.opt.foldmethod = 'marker'"
  - "vim.opt.number = true"
  - "vim.opt.relativenumber = true"
  - "vim.opt.cursorline = true"
  - "vim.opt.wrap = false"
  - "vim.opt.signcolumn = 'yes'"
  - "vim.opt.spelloptions = 'camel'"
  - "vim.opt.textwidth = 100"
  - "vim.opt.colorcolumn = '100'"
  - "vim.g.python3_host_prog = '{{ nvim_python_exe }}'"
  - "-- vim.opt.conceallevel = 2"
  - "-- vim.opt.concealcursor = 'niv'"
nvim_default_editor_options_file: "{{ nvim_default_editor_options | join('\n') }}"
nvim_default_keymap_options:
  - "vim.g.mapleader = ' '"
  - "vim.g.maplocalleader = ' '"
  - "vim.api.nvim_set_keymap('', '<Space>', '<Nop>', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('n', ':', ':Legendary commands<CR>', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-]>', '<C-\\\\><C-n> ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-h>', '<C-\\\\><C-n><C-W>h ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-j>', '<C-\\\\><C-n><C-W>j ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-k>', '<C-\\\\><C-n><C-W>k ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('t', '<C-l>', '<C-\\\\><C-n><C-W>l ', { noremap = true, silent = true })"
  - "vim.api.nvim_set_keymap('n', 'k', \"v:count == 0 ? 'gk' : 'k'\", { noremap = true, expr = true, silent = true })"
  - "vim.api.nvim_set_keymap('n', 'j', \"v:count == 0 ? 'gj' : 'j'\", { noremap = true, expr = true, silent = true })"
nvim_default_keymap_options_file: "{{ nvim_default_keymap_options | join('\n') }}"
nvim_default_ui_options:
  - "vim.opt.sessionoptions = 'buffers,curdir,folds,help,tabpages,winsize,winpos,terminal,globals'"
nvim_default_ui_options_file: "{{ nvim_default_ui_options | join('\n') }}"
nvim_plugin_example:
  plugin:
    packer:
      - "use 'path/to/plugin'"
    config:
      - "require('plugin').setup()"
    keymaps:
      - "{ '<leader>_', { n = '<cmd>command<CR>', }, description = 'Description', },"
nvim_default_plugins:
  legendary:
    packer:
      - "use { 'mrjones2014/legendary.nvim',"
      - "  requires = {"
      - "    'folke/which-key.nvim',"
      - "  },"
      - "}"
    config:
      - "require('which-key').setup({"
      - "  triggers = {'<leader>', 'g'},"
      - "  triggers_blacklist = {"
      - "    n = { '<C-w>', '<C-g>' },"
      - "    v = { '<C-w>', '<C-g>' },"
      - "  },"
      - "})"
    keymaps:
      - "{ '<CR>', {"
      - "    n = ':',"
      - "  },"
      - "  description = 'Enter Ex Commands',"
      - "},"
  telescope:
    packer:
      - "use { 'nvim-telescope/telescope-fzf-native.nvim',"
      - "  requires = {"
      - "    'nvim-telescope/telescope.nvim',"
      - "    'nvim-lua/plenary.nvim',"
      - "    'stevearc/dressing.nvim',"
      - "    'nvim-lua/popup.nvim',"
      - "    'TC72/telescope-tele-tabby.nvim',"
      - "    'sharkdp/fd',"
      - "  },"
      - "  run = 'make',"
      - "}"
      - "use { 'nvim-telescope/telescope-ui-select.nvim' }"
      - "use { 'princejoogie/dir-telescope.nvim' }"
    config:
      - "require('telescope').setup({"
      - "  defaults = {"
      - "    theme = 'dropdown',"
      - "    layout_config = {"
      - "      vertical = { width = 1.8 }"
      - "      -- other layout configuration here"
      - "    },"
      - "    mappings = {"
      - "      i = {"
      - "        ['<C-u>'] = false,"
      - "        ['<C-d>'] = false,"
      - "      },"
      - "    },"
      - "  },"
      - "  pickers = {"
      - "    find_files = {"
      - "      theme = 'dropdown',"
      - "      find_command = { '{{ fd_exe }}' },"
      - "      layout_config = {"
      - "        vertical = { width = 1.2 }"
      - "      },"
      - "    },"
      - "    buffers = {"
      - "      theme = 'ivy',"
      - "      layout_config = {"
      - "        vertical = { width = 1.8 }"
      - "      },"
      - "    }"
      - "  },"
      - "  extensions = {"
      - "    -- ['ui-select'] = {"
      - "    --   require('telescope.themes').get_dropdown {"
      - "    --     -- even more opts"
      - "    --   }"
      - ""
      - "    --   -- pseudo code / specification for writing custom displays, like the one"
      - "    --   -- for 'codeactions'"
      - "    --   -- specific_opts = {"
      - "    --   --   [kind] = {"
      - "    --   --     make_indexed = function(items) -> indexed_items, width,"
      - "    --   --     make_displayer = function(widths) -> displayer"
      - "    --   --     make_display = function(displayer) -> function(e)"
      - "    --   --     make_ordinal = function(e) -> string"
      - "    --   --   },"
      - "    --   --   -- for example to disable the custom builtin 'codeactions' display"
      - "    --   --      do the following"
      - "    --   --   codeactions = false,"
      - "    --   -- }"
      - "    -- },"
      - "    tele_tabby = {"
      - "      use_highlighter = true,"
      - "    },"
      - "  }"
      - "})"
      - "require('telescope').load_extension('aerial')"
      - "require('telescope').load_extension('dir')"
      - "require('telescope').load_extension('fzf')"
      - "require('telescope').load_extension('ui-select')"
    keymaps:
      - "{ '<leader>ff', { n = '<cmd>lua require(\\'telescope.builtin\\').find_files()<CR>', }, description = 'Telescope: Find Files', },"
      - "{ '<leader>fb', { n = '<cmd>lua require(\\'telescope.builtin\\').buffers()<CR>', }, description = 'Telescope: Find Open Buffers', },"
      - "{ '<leader>fh', { n = '<cmd>lua require(\\'telescope.builtin\\').help_tags()<CR>', }, description = 'Telescope: Find Help Tags', },"
      - "{ '<leader>ft', { n = '<cmd>Telescope tele_tabby list<CR>', }, description = 'Telescope: Search Tabs', },"
      - "{ '<leader>fl', { n = '<cmd>Telescope aerial<CR>', }, description = 'Telescope: Search Aerial Document Symbols', },"
      - "{ '_', { n = '<cmd>lua require(\\'telescope.builtin\\').grep_string()<CR>', }, description = 'Telescope: Grep String(Cursor Word)', },"
      - "{ '<leader>q', { n = '<cmd>Telescope dir live_grep<CR>', }, description = 'Telescope: Selective Live Grep Project', },"
      - "{ '<leader>Q', { n = '<cmd>lua require(\\'telescope.builtin\\').live_grep()<CR>', }, description = 'Telescope: Live Grep Project', },"
      - "{ '<leader>/', { n = '<cmd>lua require(\\'telescope.builtin\\').current_buffer_fuzzy_find()<CR>', }, description = 'Telescope: Find in Current Buffer', },"
      - "{ '<leader>?', { n = '<cmd>lua require(\\'telescope.builtin\\').oldfiles()<CR>', }, description = 'Telescope: Old Files', },"
  hydra:
    packer:
      - "use { 'anuvyklack/hydra.nvim',"
      - "  requires = {"
      - "    'anuvyklack/keymap-layer.nvim',"
      - "    'jlanzarotta/bufexplorer',"
      - "    'sindrets/winshift.nvim',"
      - "    'mrjones2014/smart-splits.nvim',"
      - "    'anuvyklack/windows.nvim',"
      - "    'anuvyklack/middleclass',"
      - "    'anuvyklack/animation.nvim',"
      - "    'lewis6991/gitsigns.nvim',"
      - "    'declancm/maximize.nvim',"
      - "  },"
      - "}"
    config:
      - "vim.o.winwidth = 10"
      - "vim.o.winminwidth = 10"
      - "vim.o.equalalways = false"
      - "require('maximize').setup({"
      - "  default_keymaps = false,"
      - "})"
      - "local Hydra = require('hydra')"
      - "local gitsigns = require('gitsigns')"
      - "local hint = [["
      - " _J_: next hunk   _s_: stage hunk        _d_: show deleted   _b_: blame line"
      - " _K_: prev hunk   _u_: undo last stage   _p_: preview hunk   _B_: blame show full "
      - " ^ ^              _S_: stage buffer      ^ ^                 _/_: show base file"
      - " ^"
      - " ^ ^              _<Enter>_: Neogit      _g_: Gitui          _q_: exit"
      - "]]"
      - "Hydra({"
      - "   name = 'Git',"
      - "   hint = hint,"
      - "   config = {"
      - "      buffer = bufnr,"
      - "      color = 'pink',"
      - "      invoke_on_body = true,"
      - "      hint = {"
      - "         border = 'rounded'"
      - "      },"
      - "      on_enter = function()"
      - "         vim.cmd 'mkview'"
      - "         vim.cmd 'silent! %foldopen!'"
      - "         vim.bo.modifiable = false"
      - "         -- gitsigns.toggle_signs(true)"
      - "         gitsigns.toggle_linehl(true)"
      - "      end,"
      - "      on_exit = function()"
      - "         local cursor_pos = vim.api.nvim_win_get_cursor(0)"
      - "         vim.cmd 'loadview'"
      - "         vim.api.nvim_win_set_cursor(0, cursor_pos)"
      - "         vim.cmd 'normal zv'"
      - "         -- gitsigns.toggle_signs(false)"
      - "         gitsigns.toggle_linehl(false)"
      - "         gitsigns.toggle_deleted(false)"
      - "      end,"
      - "   },"
      - "   mode = {'n','x'},"
      - "   body = '<leader>g',"
      - "   heads = {"
      - "      { 'J',"
      - "         function()"
      - "            if vim.wo.diff then return ']c' end"
      - "            vim.schedule(function() gitsigns.next_hunk() end)"
      - "            return '<Ignore>'"
      - "         end,"
      - "         { expr = true, desc = 'next hunk' } },"
      - "      { 'K',"
      - "         function()"
      - "            if vim.wo.diff then return '[c' end"
      - "            vim.schedule(function() gitsigns.prev_hunk() end)"
      - "            return '<Ignore>'"
      - "         end,"
      - "         { expr = true, desc = 'prev hunk' } },"
      - "      { 's', ':Gitsigns stage_hunk<CR>', { silent = true, desc = 'stage hunk' } },"
      - "      { 'u', gitsigns.undo_stage_hunk, { desc = 'undo last stage' } },"
      - "      { 'S', gitsigns.stage_buffer, { desc = 'stage buffer' } },"
      - "      { 'p', gitsigns.preview_hunk, { desc = 'preview hunk' } },"
      - "      { 'd', gitsigns.toggle_deleted, { nowait = true, desc = 'toggle deleted' } },"
      - "      { 'b', gitsigns.blame_line, { desc = 'blame' } },"
      - "      { 'B', function() gitsigns.blame_line{ full = true } end, { desc = 'blame show full' } },"
      - "      { '/', gitsigns.show, { exit = true, desc = 'show base file' } }, -- show the base of the file"
      - "      { '<Enter>', '<Cmd>Neogit<CR>', { exit = true, desc = 'Neogit' } },"
      - "      { 'g', '<Cmd>Gitui<CR>', { exit = true, desc = 'Gitui' } },"
      - "      { 'q', nil, { exit = true, nowait = true, desc = 'exit' } },"
      - "   }"
      - "})"
      - "local hint = [["
      - "  ^ ^        Options"
      - "  ^"
      - "  _v_ %{ve} virtual edit"
      - "  _i_ %{list} invisible characters  "
      - "  _s_ %{spell} spell"
      - "  _w_ %{wrap} wrap"
      - "  _c_ %{cul} cursor line"
      - "  _n_ %{nu} number"
      - "  _r_ %{rnu} relative number"
      - "  ^"
      - "       ^^^^                _<Esc>_"
      - "]]"
      - "Hydra({"
      - "   name = 'Options',"
      - "   hint = hint,"
      - "   config = {"
      - "      color = 'amaranth',"
      - "      invoke_on_body = true,"
      - "      hint = {"
      - "         border = 'rounded',"
      - "         position = 'middle'"
      - "      }"
      - "   },"
      - "   mode = {'n','x'},"
      - "   body = '<leader>o',"
      - "   heads = {"
      - "      { 'n', function()"
      - "         if vim.o.number == true then"
      - "            vim.o.number = false"
      - "         else"
      - "            vim.o.number = true"
      - "         end"
      - "      end, { desc = 'number' } },"
      - "      { 'r', function()"
      - "         if vim.o.relativenumber == true then"
      - "            vim.o.relativenumber = false"
      - "         else"
      - "            vim.o.number = true"
      - "            vim.o.relativenumber = true"
      - "         end"
      - "      end, { desc = 'relativenumber' } },"
      - "      { 'v', function()"
      - "         if vim.o.virtualedit == 'all' then"
      - "            vim.o.virtualedit = 'block'"
      - "         else"
      - "            vim.o.virtualedit = 'all'"
      - "         end"
      - "      end, { desc = 'virtualedit' } },"
      - "      { 'i', function()"
      - "         if vim.o.list == true then"
      - "            vim.o.list = false"
      - "         else"
      - "            vim.o.list = true"
      - "         end"
      - "      end, { desc = 'show invisible' } },"
      - "      { 's', function()"
      - "         if vim.o.spell == true then"
      - "            vim.o.spell = false"
      - "         else"
      - "            vim.o.spell = true"
      - "         end"
      - "      end, { exit = true, desc = 'spell' } },"
      - "      { 'w', function()"
      - "         if vim.o.wrap ~= true then"
      - "            vim.o.wrap = true"
      - "            -- Dealing with word wrap:"
      - "            -- If cursor is inside very long line in the file than wraps"
      - "            -- around several rows on the screen, then 'j' key moves you to"
      - "            -- the next line in the file, but not to the next row on the"
      - "            -- screen under your previous position as in other editors. These"
      - "            -- bindings fixes this."
      - "            vim.keymap.set('n', 'k', function() return vim.v.count > 0 and 'k' or 'gk' end,"
      - "                                     { expr = true, desc = 'k or gk' })"
      - "            vim.keymap.set('n', 'j', function() return vim.v.count > 0 and 'j' or 'gj' end,"
      - "                                     { expr = true, desc = 'j or gj' })"
      - "         else"
      - "            vim.o.wrap = false"
      - "            vim.keymap.del('n', 'k')"
      - "            vim.keymap.del('n', 'j')"
      - "         end"
      - "      end, { desc = 'wrap' } },"
      - "      { 'c', function()"
      - "         if vim.o.cursorline == true then"
      - "            vim.o.cursorline = false"
      - "         else"
      - "            vim.o.cursorline = true"
      - "         end"
      - "      end, { desc = 'cursor line' } },"
      - "      { '<Esc>', nil, { exit = true } }"
      - "   }"
      - "})"
      - "require('windows').setup()"
      - "require('smart-splits').setup({"
      - "  ignored_buftypes = {"
      - "    'NvimTree',"
      - "    'Aerial',"
      - "    '[No Name]',"
      - "  },"
      - "})"
      - "local splits = require('smart-splits')"
      - "local cmd = require('hydra.keymap-util').cmd"
      - "local pcmd = require('hydra.keymap-util').pcmd"
      - "local buffer_hydra = Hydra({"
      - "   name = 'Barbar',"
      - "   config = {"
      - "      on_key = function()"
      - "         -- Preserve animation"
      - "         vim.wait(200, function() vim.cmd 'redraw' end, 30, false)"
      - "      end"
      - "   },"
      - "   heads = {"
      - "      { 'h', function() vim.cmd('BufferPrevious') end, { on_key = false } },"
      - "      { 'l', function() vim.cmd('BufferNext') end, { desc = 'choose', on_key = false } },"
      - "      { 'H', function() vim.cmd('BufferMovePrevious') end },"
      - "      { 'L', function() vim.cmd('BufferMoveNext') end, { desc = 'move' } },"
      - "      { 'p', function() vim.cmd('BufferPin') end, { desc = 'pin' } },"
      - "      { 'd', function() vim.cmd('BufferClose') end, { desc = 'close' } },"
      - "      { 'c', function() vim.cmd('BufferClose') end, { desc = false } },"
      - "      { 'q', function() vim.cmd('BufferClose') end, { desc = false } },"
      - "      { 'od', function() vim.cmd('BufferOrderByDirectory') end, { desc = 'by directory' } },"
      - "      { 'ol', function() vim.cmd('BufferOrderByLanguage') end,  { desc = 'by language' } },"
      - "      { '<Esc>', nil, { exit = true } },"
      - "      { '<C-c>', nil, { exit = true } },"
      - "   }"
      - "})"
      - "local function choose_buffer()"
      - "   if #vim.fn.getbufinfo({ buflisted = true }) > 1 then"
      - "      buffer_hydra:activate()"
      - "   end"
      - "end"
      - "vim.keymap.set('n', 'gb', choose_buffer)"
      - "local window_hint = [["
      - " ^^^^^^^^^^^^     Move      ^^    Size   ^^   ^^     Split"
      - " ^^^^^^^^^^^^-------------  ^^-----------^^   ^^---------------"
      - " ^ ^ _k_ ^ ^  ^ ^ _K_ ^ ^   ^   _<C-k>_   ^   _s_: horizontally "
      - " _h_ ^ ^ _l_  _H_ ^ ^ _L_   _<C-h>_ _<C-l>_   _v_: vertically"
      - " ^ ^ _j_ ^ ^  ^ ^ _J_ ^ ^   ^   _<C-j>_   ^   _q_, _c_: close"
      - " focus^^^^^^  window^^^^^^  ^_=_: equalize^   _z_: maximize"
      - " ^ ^ ^ ^ ^ ^  ^ ^ ^ ^ ^ ^   ^^ ^          ^   _o_: remain only"
      - " _b_: choose buffer"
      - "]]"
      - "Hydra({"
      - "   name = 'Windows',"
      - "   hint = window_hint,"
      - "   config = {"
      - "      invoke_on_body = true,"
      - "      hint = {"
      - "         border = 'rounded',"
      - "         position = 'middle',"
      - "         offset = -1"
      - "      }"
      - "   },"
      - "   mode = 'n',"
      - "   body = '<C-w>',"
      - "   heads = {"
      - "      { 'h', function() splits.move_cursor_left() end },"
      - "      { 'j', function() splits.move_cursor_down() end },"
      - "      { 'k', function() splits.move_cursor_up() end },"
      - "      { 'l', function() splits.move_cursor_right() end },"
      - "      { 'H', cmd 'WinShift left' },"
      - "      { 'J', cmd 'WinShift down' },"
      - "      { 'K', cmd 'WinShift up' },"
      - "      { 'L', cmd 'WinShift right' },"
      - "      { '<C-h>', function() splits.resize_left(2)  end },"
      - "      { '<C-j>', function() splits.resize_down(2)  end },"
      - "      { '<C-k>', function() splits.resize_up(2)    end },"
      - "      { '<C-l>', function() splits.resize_right(2) end },"
      - "      { '=', '<C-w>=', { desc = 'equalize'} },"
      - "      { 's',     pcmd('split', 'E36') },"
      - "      { '<C-s>', pcmd('split', 'E36'), { desc = false } },"
      - "      { 'v',     pcmd('vsplit', 'E36') },"
      - "      { '<C-v>', pcmd('vsplit', 'E36'), { desc = false } },"
      - "      { 'w',     '<C-w>w', { exit = true, desc = false } },"
      - "      { '<C-w>', '<C-w>w', { exit = true, desc = false } },"
      - "      { 'z',     function() require('maximize').toggle() end, { exit = true, desc = 'maximize' } },"
      - "      { '<C-z>', function() require('maximize').toggle() end, { exit = true, desc = false } },"
      - "      { 'o',     '<C-w>o', { exit = true, desc = 'remain only' } },"
      - "      { '<C-o>', '<C-w>o', { exit = true, desc = false } },"
      - "      { 'b', choose_buffer, { exit = true, desc = 'choose buffer' } },"
      - "      { 'c',     pcmd('close', 'E444') },"
      - "      { 'q',     pcmd('close', 'E444'), { desc = 'close window' } },"
      - "      { '<C-c>', pcmd('close', 'E444'), { desc = false } },"
      - "      { '<C-q>', pcmd('close', 'E444'), { desc = false } },"
      - "      { '<Esc>', nil,  { exit = true, desc = false }}"
      - "   }"
      - "})"
    keymaps:
      - "{ '<C-h>', { n = '<cmd>lua require(\\'smart-splits\\').move_cursor_left()<CR>', }, description = 'Split/Window: Move Left', },"
      - "{ '<C-j>', { n = '<cmd>lua require(\\'smart-splits\\').move_cursor_down()<CR>', }, description = 'Split/Window: Move Down', },"
      - "{ '<C-k>', { n = '<cmd>lua require(\\'smart-splits\\').move_cursor_up()<CR>', }, description = 'Split/Window: Move Up', },"
      - "{ '<C-l>', { n = '<cmd>lua require(\\'smart-splits\\').move_cursor_right()<CR>', }, description = 'Split/Window: Move Right', },"
  treesitter:
    packer:
      - "use { 'nvim-treesitter/nvim-treesitter', run = ':TSUpdate' }"
      - "use { 'nvim-treesitter/nvim-treesitter-textobjects', requires = { 'nvim-treesitter/nvim-treesitter' } }"
      - "use { 'nvim-treesitter/nvim-treesitter-context', requires = { 'nvim-treesitter/nvim-treesitter' } }"
      - "use { 'nvim-treesitter/nvim-treesitter-refactor', requires = { 'nvim-treesitter/nvim-treesitter' } }"
      - "use { 'p00f/nvim-ts-rainbow', requires = { 'nvim-treesitter/nvim-treesitter' } }"
      - "use { 'IndianBoy42/tree-sitter-just' }"
      - "use 'David-Kunz/markid'"
    config:
      - "local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()"
      - "parser_configs.norg_meta = {"
      - "    install_info = {"
      - "        url = 'https://github.com/nvim-neorg/tree-sitter-norg-meta',"
      - "        files = { 'src/parser.c' },"
      - "        branch = 'main'"
      - "    },"
      - "}"
      - "parser_configs.norg_table = {"
      - "    install_info = {"
      - "        url = 'https://github.com/nvim-neorg/tree-sitter-norg-table',"
      - "        files = { 'src/parser.c' },"
      - "        branch = 'main'"
      - "    },"
      - "}"
      - "{{ treesitter_parsers_custom_file or '-- No Custom Treesitter Parsers Installed' }}"
      - "require('nvim-treesitter.configs').setup({"
      - "  ensure_installed = { "
      - "    'bash',"
      - "    'fennel',"
      - "    'json',"
      - "    'lua',"
      - "    'make',"
      - "    'markdown',"
      - "    'nix',"
      - "    'norg',"
      - "    'norg_meta',"
      - "    'norg_table',"
      - "    'query',"
      - "    'toml',"
      - "    'yaml',"
      - "    {{ treesitter_parsers_file or '-- No Extra Treesitter Parsers Installed' }}"
      - "  },"
      - "  highlight = {"
      - "    enable = true, -- false will disable the whole extension"
      - "  },"
      - "  rainbow = {"
      - "    enable = true,"
      - "    -- disable = { 'jsx', 'cpp' }, list of languages you want to disable the plugin for"
      - "    extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean"
      - "    max_file_lines = nil, -- Do not enable for files with more than n lines, int"
      - "    -- colors = {}, -- table of hex strings"
      - "    -- termcolors = {} -- table of colour name strings"
      - "  },"
      - "  incremental_selection = {"
      - "    enable = true,"
      - "    keymaps = {"
      - "      init_selection = 'gnn',"
      - "      node_incremental = 'grn',"
      - "      scope_incremental = 'grc',"
      - "      node_decremental = 'grm',"
      - "    },"
      - "  },"
      - "  indent = {"
      - "    enable = true,"
      - "  },"
      - "  textobjects = {"
      - "    select = {"
      - "      enable = true,"
      - "      lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim"
      - "      keymaps = {"
      - "        -- You can use the capture groups defined in textobjects.scm"
      - "        ['af'] = '@function.outer',"
      - "        ['if'] = '@function.inner',"
      - "        ['ac'] = '@class.outer',"
      - "        ['ic'] = '@class.inner',"
      - "      },"
      - "    },"
      - "    move = {"
      - "      enable = true,"
      - "      set_jumps = true, -- whether to set jumps in the jumplist"
      - "      goto_next_start = {"
      - "        [']m'] = '@function.outer',"
      - "        [']]'] = '@class.outer',"
      - "      },"
      - "      goto_next_end = {"
      - "        [']M'] = '@function.outer',"
      - "        [']['] = '@class.outer',"
      - "      },"
      - "      goto_previous_start = {"
      - "        ['[m'] = '@function.outer',"
      - "        ['[['] = '@class.outer',"
      - "      },"
      - "      goto_previous_end = {"
      - "        ['[M'] = '@function.outer',"
      - "        ['[]'] = '@class.outer',"
      - "      },"
      - "    },"
      - "  },"
      - "  refactor = {"
      - "    highlight_definitions = {"
      - "      enable = true,"
      - "      -- Set to false if you have an `updatetime` of ~100."
      - "      clear_on_cursor_move = false,"
      - "    },"
      - "  },"
      - "  markid = { enable = true },"
      - "  {{ treesitter_extra_config_cpp | join('\n') | indent(2) or '-- No Extra Treesitter Config' }}"
      - "})"
      - "require('treesitter-context').setup({"
      - "    enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)"
      - "    max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit."
      - "    trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'"
      - "    patterns = { -- Match patterns for TS nodes. These get wrapped to match at word boundaries."
      - "        -- For all filetypes"
      - "        -- Note that setting an entry here replaces all other patterns for this entry."
      - "        -- By setting the 'default' entry below, you can control which nodes you want to"
      - "        -- appear in the context window."
      - "        default = {"
      - "            'class',"
      - "            'function',"
      - "            'method',"
      - "            -- 'for', -- These won't appear in the context"
      - "            -- 'while',"
      - "            -- 'if',"
      - "            -- 'switch',"
      - "            -- 'case',"
      - "        },"
      - "        -- Example for a specific filetype."
      - "        -- If a pattern is missing, *open a PR* so everyone can benefit."
      - "        --   rust = {"
      - "        --       'impl_item',"
      - "        --   },"
      - "    },"
      - "    exact_patterns = {"
      - "        -- Example for a specific filetype with Lua patterns"
      - "        -- Treat patterns.rust as a Lua pattern (i.e '^impl_item$' will"
      - "        -- exactly match 'impl_item' only)"
      - "        -- rust = true,"
      - "    },"
      - "    -- [!] The options below are exposed but shouldn't require your attention,"
      - "    --     you can safely ignore them."
      - "    zindex = 20, -- The Z-index of the context window"
      - "    mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'"
      - "})"
      - "vim.opt.foldmethod = 'expr'"
      - "vim.opt.foldexpr = 'nvim_treesitter#foldexpr()'"
      - "local treesitter_unfold_autocmd = {}"
      - "function treesitter_unfold_autocmd.nvim_create_augroups(definitions)"
      - "    for group_name, definition in pairs(definitions) do"
      - "        vim.api.nvim_command('augroup '..group_name)"
      - "        vim.api.nvim_command('autocmd!')"
      - "        for _, def in ipairs(definition) do"
      - "            local command = table.concat(vim.tbl_flatten{'autocmd', def}, ' ')"
      - "            vim.api.nvim_command(command)"
      - "        end"
      - "        vim.api.nvim_command('augroup END')"
      - "    end"
      - "end"
      - "local autoCommands = {"
      - "    open_folds = {"
      - "        { 'BufReadPost,FileReadPost', '*', 'normal zR' },"
      - "    }"
      - "}"
      - "treesitter_unfold_autocmd.nvim_create_augroups(autoCommands)"
    keymaps:
      - ""
  ui:
    packer:
      - "use { 'kdheepak/tabline.nvim',"
      - "  requires = {"
      - "    'nvim-lualine/lualine.nvim',"
      - "    'kyazdani42/nvim-web-devicons',"
      - "    'b0o/incline.nvim',"
      - "  },"
      - "}"
      - "use { 'melkster/modicator.nvim' }"
      - "use { 'petertriho/nvim-scrollbar',"
      - "  requires = {"
      - "    'kevinhwang91/nvim-hlslens',"
      - "    'lewis6991/gitsigns.nvim',"
      - "  },"
      - "}"
      - "use { 'startup-nvim/startup.nvim',"
      - "  requires = {"
      - "    'nvim-telescope/telescope.nvim',"
      - "    'nvim-lua/plenary.nvim',"
      - "  },"
      - "}"
      - "use { 'stevearc/oil.nvim',"
      - "  requires = {"
      - "    'kyazdani42/nvim-web-devicons',"
      - "  },"
      - "}"
      - "use { 'chentoast/marks.nvim' }"
      - "use { 'rcarriga/nvim-notify' }"
      - "use { 'nvim-tree/nvim-tree.lua',"
      - "  requires = {"
      - "    'nvim-tree/nvim-web-devicons',"
      - "  },"
      - "}"
    config:
      - "require('marks').setup()"
      - "require('modicator').setup()"
      - "require('nvim-tree').setup()"
      - "require('lualine').setup({"
      - "  options = { theme  = gruvbox },"
      - "  options = {"
      - "    section_separators = { left = '', right = '' },"
      - "    component_separators = { left = '', right = '' },"
      - "    globalstatus = true,"
      - "    disabled_filetypes = {"
      - "        'packer', 'NVimTree'"
      - "    }"
      - "  },"
      - "})"
      - "require'tabline'.setup({"
      - "  enable = true,"
      - "  options = {"
      - "    max_bufferline_percent = 66, -- set to nil by default, and it uses vim.o.columns * 2/3"
      - "    show_tabs_always = true, -- this shows tabs only when there are more than one tab or if the first tab is named"
      - "    show_devicons = true, -- this shows devicons in buffer section"
      - "    show_bufnr = false, -- this appends [bufnr] to buffer section,"
      - "    show_filename_only = false, -- shows base filename only instead of relative path in filename"
      - "    modified_icon = '+ ', -- change the default modified icon"
      - "  }"
      - "})"
      - "require('incline').setup()"
      - "require('scrollbar').setup()"
      - "require('gitsigns').setup()"
      - "require('hlslens').setup()"
      - "require('startup').setup()"
      - "require('oil').setup()"
    keymaps:
      - "{ 'n', { n = '<Cmd>execute(\\'normal! \\' . v:count1 . \\'n\\')<CR><Cmd>lua require(\\'hlslens\\').start()<CR>', }, description = 'HLSLens: Next Search Result', },"
      - "{ 'N', { n = '<Cmd>execute(\\'normal! \\' . v:count1 . \\'N\\')<CR><Cmd>lua require(\\'hlslens\\').start()<CR>', }, description = 'HLSLens: Previous Search Result', },"
      - "{ '*', { n = '*<Cmd>lua require(\\'hlslens\\').start()<CR>', }, description = 'HLSLens: Search Cursorword', },"
      - "{ '#', { n = '#<Cmd>lua require(\\'hlslens\\').start()<CR>', }, description = 'HLSLens: Search Cursorword In Reverse', },"
      - "{ 'g*', { n = 'g*<Cmd>lua require(\\'hlslens\\').start()<CR>', }, 'HLSLens: Search Nearest Cursorword', },"
      - "{ 'g#', { n = 'g#<Cmd>lua require(\\'hlslens\\').start()<CR>', }, description =  'HLSLens: Search Nearest Cursorword In Reverse', },"
      - "{ '<C-]>', { n = ':noh<CR>', }, description = 'HLSLens: Clear Search Result', },"
      - "{ '-', { n = ':Oil --float<CR>', }, description = 'Oil: Open Parent Directory', },"
      - "{ '<leader>s', { n = '<cmd>NvimTreeToggle %:p:~:.:h<CR>', }, description = 'Nvim-Tree: Toggle Tree on Current File', },"
  git:
    packer:
      - "use { 'sindrets/diffview.nvim', requires = 'nvim-lua/plenary.nvim' }"
      - "use { 'TimUntersberger/neogit', requires = 'nvim-lua/plenary.nvim' }"
    config:
      - "require('diffview').setup()"
      - "require('neogit').setup()"
    keymaps:
      - "-- { '<leader>gb', { n = '<cmd>lua require(\\'telescope.builtin\\').git_branches()<CR>', }, description = 'Git: Pick Branch'},"
      - "-- { '<leader>gl', { n = '<cmd>lua require(\\'telescope.builtin\\').git_commits()<CR>', }, description = 'Git: Pick Commits'},"
      - "-- { '<leader>gc', { n = '<cmd>lua require(\\'telescope.builtin\\').git_bcommits()<CR>', }, description = 'Git: Pick Buffer Commits'},"
      - "-- { '<leader>gs', { n = '<cmd>lua require(\\'telescope.builtin\\').git_stash()<CR>', }, description = 'Git: Show Stash'},"
      - "-- { '<leader>gd', { n = '<cmd>DiffviewOpen<CR>', }, description = 'Git: Show Diff'},"
      - "-- { '<leader>gh', { n = '<cmd>DiffviewFileHistory<CR>', }, description = 'Git: Show Diff'},"
  terminal:
    packer:
      - "use { 'akinsho/toggleterm.nvim',"
      - "  requires = {"
      - "    'is0n/fm-nvim',"
      - "  },"
      - "}"
    config:
      - "require('fm-nvim').setup({"
      - "  -- (Vim) Command used to open files"
      - "  edit_cmd = 'edit',"
      - "  -- See `Q&A` for more info"
      - "  on_close = {},"
      - "  on_open = {},"
      - "  -- UI Options"
      - "  ui = {"
      - "    -- Default UI (can be 'split' or 'float')"
      - "    default = 'float',"
      - "    float = {"
      - "      -- Floating window border (see ':h nvim_open_win')"
      - "      border    = 'none',"
      - "      -- Highlight group for floating window/border (see ':h winhl')"
      - "      float_hl  = 'Normal',"
      - "      border_hl = 'FloatBorder',"
      - "      -- Floating Window Transparency (see ':h winblend')"
      - "      blend     = 0,"
      - "      -- Num from 0 - 1 for measurements"
      - "      height    = 0.9,"
      - "      width     = 0.9,"
      - "      -- X and Y Axis of Window"
      - "      x         = 0.5,"
      - "      y         = 0.5"
      - "    },"
      - "    split = {"
      - "      -- Direction of split"
      - "      direction = 'topleft',"
      - "      -- Size of split"
      - "      size      = 24"
      - "    }"
      - "  },"
      - "  -- Terminal commands used w/ file manager (have to be in your $PATH)"
      - "  cmds = {"
      - "    fzf_cmd     = '{{ fzf_exe }} --preview \\'{{ bat_exe }} --style=numbers --color=always --line-range :500 {}\\'',"
      - "    xplr_cmd    = '{{ xplr_exe }}',"
      - "    skim_cmd    = '{{ skim_exe }}',"
      - "    broot_cmd   = '{{ broot_exe }}',"
      - "    joshuto_cmd = '{{ joshuto_exe }}',"
      - "  },"
      - "  -- Mappings used with the plugin"
      - "  mappings = {"
      - "    vert_split = '<C-v>',"
      - "    horz_split = '<C-x>',"
      - "    tabedit    = '<C-t>',"
      - "    edit       = '<C-e>',"
      - "    ESC        = '<ESC>'"
      - "  },"
      - "  -- Path to broot config"
      - "  broot_conf = '{{ broot_config }}/nvim.hjson'"
      - "})"
      - "require('toggleterm').setup({"
      - "  size = function(term)"
      - "    if term.direction == 'horizontal' then"
      - "      return 25"
      - "    elseif term.direction == 'vertical' then"
      - "      return vim.o.columns * 0.4"
      - "    end"
      - "  end,"
      - "  open_mapping = [[<c-s>]],"
      - "  hide_numbers = true,"
      - "  shade_filetypes = {},"
      - "  shade_terminals = true,"
      - "  shading_factor = '1',"
      - "  start_in_insert = true,"
      - "  insert_mappings = true, -- whether or not the open mapping applies in insert mode"
      - "  persist_size = true,"
      - "  direction = 'float',"
      - "  close_on_exit = false,"
      - "  shell = vim.o.shell,"
      - "  float_opts = {"
      - "    border = 'curved',"
      - "    width = function()"
      - "      return math.floor(vim.o.columns * 0.8)"
      - "    end,"
      - "    height = function()"
      - "      return math.floor(vim.o.lines * 0.8)"
      - "    end,"
      - "    winblend = 3,"
      - "    highlights = {"
      - "      border = 'Normal',"
      - "      background = 'Normal',"
      - "    }"
      - "  }"
      - "})"
      - "local Terminal  = require('toggleterm.terminal').Terminal"
      - "local justchoose = Terminal:new({ cmd = '{{ just_exe }} --choose', hidden = true })"
      - "function just_terminal_runner()"
      - "  justchoose:toggle()"
      - "end"
      - "local gitui = Terminal:new({ cmd = '{{ gitui_exe }}', close_on_exit = true, hidden = true })"
      - "function gitui_terminal_runner()"
      - "  gitui:toggle()"
      - "end"
    keymaps:
      - "-- { '<leader>sj', { n = '<cmd>lua require(\\'fm-nvim\\').Joshuto(vim.fm.expand(\\'%:p:~:.:h\\'))<CR>', }, description = 'ToggleTerm: Joshuto(Current File)', },"
      - "-- { '<leader>sJ', { n = '<cmd>lua require(\\'fm-nvim\\').Joshuto()<CR>', }, description = 'ToggleTerm: Joshuto(Project Root)', },"
      - "-- { '<leader>sx', { n = '<cmd>lua require(\\'fm-nvim\\').Xplr(vim.fn.expand(\\'%:p:~:.:h\\'))<CR>', }, description = 'ToggleTerm: XPLR(Current File)', },"
      - "-- { '<leader>sX', { n = '<cmd>lua require(\\'fm-nvim\\').Xplr()<CR>', }, description = 'ToggleTerm: XPLR(Project Root)', },"
      - "{ '<leader>j', { n = '<cmd>lua just_terminal_runner()<CR>', }, description = 'ToggleTerm: GitUI', },"
      - "-- { '<leader>gg', { n = '<cmd>lua gitui_terminal_runner()<CR>', }, description = 'ToggleTerm: GitUI', },"
  motion:
    packer:
      - "use { 'ggandor/flit.nvim',"
      - "  requires = {"
      - "    'ggandor/leap.nvim',"
      - "    'ggandor/leap-spooky.nvim',"
      - "  },"
      - "}"
      - "use { 'cbochs/portal.nvim',"
      - "  requires = {"
      - "    'cbochs/grapple.nvim',  -- Optional: provides the 'grapple' query item"
      - "    'ThePrimeagen/harpoon', -- Optional: provides the 'harpoon' query item"
      - "  },"
      - "}"
      - "use { 'kylechui/nvim-surround' }"
    config:
      - "require('leap').set_default_keymaps(true)"
      - "require('leap-spooky').setup()"
      - "require('flit').setup()"
      - "require('portal').setup()"
      - "require('nvim-surround').setup()"
    keymaps:
      - ""
      - "{ '<C-o>', { n = '<cmd>lua require(\\'portal\\').jump_backward()<CR>', }, description = 'Portal: Jump Backward', },"
      - "{ '<C-i>', { n = '<cmd>lua require(\\'portal\\').jump_forward()<CR>', }, description = 'Portal: Jump Forward', },"
  colorscheme:
    packer:
      - "use 'sainnhe/gruvbox-material'"
    config:
      - "vim.o.background = 'dark'"
      - "vim.cmd([[colorscheme gruvbox-material]])"
    keymaps:
      - ""
  intellisense:
    packer:
      - "use { 'saadparwaiz1/cmp_luasnip',"
      - "  requires = {"
      - "    'neovim/nvim-lspconfig',"
      - "    'glepnir/lspsaga.nvim',"
      - "    'dnlhc/glance.nvim',"
      - "    'onsails/lspkind.nvim',"
      - "    'jose-elias-alvarez/null-ls.nvim',"
      - "    'L3MON4D3/LuaSnip',"
      - "    'hrsh7th/nvim-cmp',"
      - "    'hrsh7th/cmp-buffer',"
      - "    'hrsh7th/cmp-path',"
      - "    'hrsh7th/cmp-nvim-lsp',"
      - "  },"
      - "}"
      - "use { 'stevearc/aerial.nvim', }"
    config:
      - "require('aerial').setup({"
      - "  -- optionally use on_attach to set keymaps when aerial has attached to a buffer"
      - "  on_attach = function(bufnr)"
      - "    -- Jump forwards/backwards with '{' and '}'"
      - "    vim.keymap.set('n', '{', '<cmd>AerialPrev<CR>', {buffer = bufnr})"
      - "    vim.keymap.set('n', '}', '<cmd>AerialNext<CR>', {buffer = bufnr})"
      - "  end"
      - "})"
      - "require('glance').setup()"
      - "local null_ls = require('null-ls')"
      - "null_ls.setup({"
      - "    sources = {"
      - "        null_ls.builtins.completion.luasnip,"
      - "        {{ null_ls_providers_luafile or '-- No Extra Null-LS Providers Configured' }}"
      - "    },"
      - "})"
      - "local lspconfig = require('lspconfig')"
      - "local lspkind = require('lspkind')"
      - "local cmp = require('cmp')"
      - "cmp.setup({"
      - "  sources = {"
      - "    { name = 'nvim_lsp' },"
      - "    { name = 'luasnip' },"
      - "    { name = 'buffer' },"
      - "    { name = 'path' },"
      - "  },"
      - "  formatting = {"
      - "    format = lspkind.cmp_format({"
      - "      mode = 'symbol', -- show only symbol annotations"
      - "      maxwidth = 50, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)"
      - "      ellipsis_char = '...', -- when popup menu exceed maxwidth, the truncated part would show ellipsis_char instead (must define maxwidth first)"
      - "    })"
      - "  },"
      - "  snippet = {"
      - "    expand = function(args)"
      - "      require('luasnip').lsp_expand(args.body)"
      - "    end,"
      - "  },"
      - "  completion = {"
      - "    autocomplete = true,"
      - "  },"
      - "  mapping = {"
      - "    ['<C-p>'] = cmp.mapping.select_prev_item(),"
      - "    ['<C-n>'] = cmp.mapping.select_next_item(),"
      - "    ['<C-d>'] = cmp.mapping.scroll_docs(-4),"
      - "    ['<C-f>'] = cmp.mapping.scroll_docs(4),"
      - "    ['<C-Space>'] = cmp.mapping.complete(),"
      - "    ['<C-e>'] = cmp.mapping.close(),"
      - "    ['<CR>'] = cmp.mapping.confirm {"
      - "      behavior = cmp.ConfirmBehavior.Replace,"
      - "      select = true,"
      - "    },"
      - "    ['<Tab>'] = cmp.mapping(function(fallback)"
      - "      if cmp.visible() then"
      - "        cmp.select_next_item()"
      - "      elseif luasnip.expand_or_jumpable() then"
      - "        luasnip.expand_or_jump()"
      - "      elseif has_words_before() then"
      - "        cmp.complete()"
      - "      else"
      - "        fallback()"
      - "      end"
      - "    end, { 'i', 's' }),"
      - "    ['<S-Tab>'] = cmp.mapping(function(fallback)"
      - "      if cmp.visible() then"
      - "        cmp.select_prev_item()"
      - "      elseif luasnip.jumpable(-1) then"
      - "        luasnip.jump(-1)"
      - "      else"
      - "        fallback()"
      - "      end"
      - "    end, { 'i', 's' }),"
      - "  },"
      - "  {{ nvim_completion_config_cpp | join('\n') | indent(2) or '-- No Extra Completion Config' }}"
      - "})"
      - "local on_attach = function(_, bufnr)"
      - "  vim.cmd [[ command! Format execute 'lua vim.lsp.buf.formatting()' ]]"
      - "end"
      - "local capabilities = vim.lsp.protocol.make_client_capabilities()"
      - "capabilities = require('cmp_nvim_lsp').default_capabilities()"
      - "local servers = {"
      - "  'ansiblels',"
      - "  'bashls',"
      - "  {{ lsp_providers_file or '-- No Additional Servers Preconfigured' }}"
      - "}"
      - "for _, lsp in ipairs(servers) do"
      - "  lspconfig[lsp].setup {"
      - "    on_attach = on_attach,"
      - "    capabilities = capabilities,"
      - "  }"
      - "end"
      - "{{ lsp_provider_lspconfig_setup_file or '-- No Extra Lsp Providers Installed' }}"
      - "require('lspsaga').init_lsp_saga({"
      - "  symbol_in_winbar = {"
      - "    in_custom = true"
      - "  },"
      - "  finder_action_keys = {"
      - "    open = {'o', '<CR>'},"
      - "    vsplit = 's',"
      - "    split = 'x',"
      - "    tabe = 't',"
      - "    quit = {'q', '<ESC>'},"
      - "  },"
      - "  definition_action_keys = {"
      - "    edit = '<C-c>o',"
      - "    vsplit = '<C-c>v',"
      - "    split = '<C-c>x',"
      - "    tabe = '<C-c>t',"
      - "    quit = 'q',"
      - "  },"
      - "})"
      - "local function get_file_name(include_path)"
      - "  local file_name = require('lspsaga.symbolwinbar').get_file_name()"
      - "  if vim.fn.bufname '%' == '' then return '' end"
      - "  if include_path == false then return file_name end"
      - "  -- Else if include path: ./lsp/saga.lua -> lsp > saga.lua"
      - "  local sep = vim.loop.os_uname().sysname == 'Windows' and '\\\\' or '/'"
      - "  local path_list = vim.split(string.gsub(vim.fn.expand '%:~:.:h', '%%', ''), sep)"
      - "  local file_path = ''"
      - "  for _, cur in ipairs(path_list) do"
      - "    file_path = (cur == '.' or cur == '~') and '' or"
      - "      file_path .. cur .. ' ' .. '%#LspSagaWinbarSep#>%*' .. ' %*'"
      - "  end"
      - "  return file_path .. file_name"
      - "end"
      - "local function config_winbar_or_statusline()"
      - "  local exclude = {"
      - "    ['terminal'] = true,"
      - "    ['toggleterm'] = true,"
      - "    ['prompt'] = true,"
      - "    ['NvimTree'] = true,"
      - "    ['help'] = true,"
      - "  } -- Ignore float windows and exclude filetype"
      - "  if vim.api.nvim_win_get_config(0).zindex or exclude[vim.bo.filetype] then"
      - "    vim.wo.winbar = ''"
      - "  else"
      - "    local ok, lspsaga = pcall(require, 'lspsaga.symbolwinbar')"
      - "    local sym"
      - "    if ok then sym = lspsaga.get_symbol_node() end"
      - "    local win_val = ''"
      - "    win_val = get_file_name(true) -- set to true to include path"
      - "    if sym ~= nil then win_val = win_val .. sym end"
      - "    vim.wo.winbar = win_val"
      - "    -- if work in statusline"
      - "    vim.wo.stl = win_val"
      - "  end"
      - "end"
      - "local events = { 'BufEnter', 'BufWinEnter', 'CursorMoved' }"
      - "vim.api.nvim_create_autocmd(events, {"
      - "  pattern = '*',"
      - "  callback = function() config_winbar_or_statusline() end,"
      - "})"
      - "vim.api.nvim_create_autocmd('User', {"
      - "  pattern = 'LspsagaUpdateSymbol',"
      - "  callback = function() config_winbar_or_statusline() end,"
      - "})"
    keymaps:
      - "-- { 'gd', { n = '<cmd>Lspsaga peek_definition<CR>', }, description = 'LSPSaga: Peek Definition', },"
      - "{ 'gd', { n = '<cmd>Lspsaga lsp_finder<CR>', }, description = 'LSPSaga: Definition/Reference Finder', },"
      - "{ 'gs', { n = '<cmd>Telescope lsp_document_symbols<CR>', }, description = 'Telescope: Document Symbol Finder', },"
      - "{ 'gS', { n = '<cmd>Telescope lsp_dynamic_workspace_symbols<CR>', }, description = 'Telescope: Workspace Symbol Finder', },"
      - "-- { '<leader>ca', { n = '<cmd>Lspsaga code_action<CR>', }, description = 'LSPSaga: Code Action', },"
      - "-- { '<leader>S', { n = '<cmd>Lspsaga outline<CR>', }, description = 'LSPSaga: Outline Toggle', },"
      - "{ '<leader>S', { n = '<cmd>AerialToggle! right<CR>', }, description = 'Aerial: Outline Toggle', },"
      - "{ 'K', { n = '<cmd>Lspsaga hover_doc<CR>', }, description = 'LSPSaga: Hover Docs', },"
      - "{ '[e', { n = '<cmd>Lspsaga diagnostic_jump_prev<CR>', }, description = 'LSPSaga: Previous Diagnostic', },"
      - "{ 'e]', { n = '<cmd>Lspsaga diagnostic_jump_next<CR>', }, description = 'LSPSaga: Next Diagnostic', },"
      - "{ '[E', { n = 'function() require(\\'lspsaga.diagnostic\\').goto_prev({ severity = vim.diagnostic.severity.ERROR }) end', }, description = 'LSPSaga: Previous Error', },"
      - "{ 'E]', { n = 'function() require(\\'lspsaga.diagnostic\\').goto_next({ severity = vim.diagnostic.severity.ERROR }) end', }, description = 'LSPSaga: Next Error', },"
  debugger:
    packer:
      - ""
      - "use { 'rcarriga/nvim-dap-ui', requires = { 'mfussenegger/nvim-dap' } }"
      - "use { 'nvim-telescope/telescope-dap.nvim',"
      - "  requires = {"
      - "      {'mfussenegger/nvim-dap'},"
      - "      {'nvim-telescope/telescope.nvim'}"
      - "  }"
      - "}"
      - "use {  'theHamsta/nvim-dap-virtual-text',"
      - "  requires = {"
      - "      {'mfussenegger/nvim-dap'},"
      - "      {'nvim-treesitter/nvim-treesitter'}"
      - "  }"
      - "}"
    config:
      - "local dap = require('dap')"
      - "require('dapui').setup()"
      - "require('nvim-dap-virtual-text').setup()"
    keymaps:
      - "{ '<leader>db', { n = '<cmd>lua require(\\'dap\\').toggle_breakpoint()<CR>', }, description = 'DAP: Toggle Breakpoint', },"
      - "{ '<leader>dc', { n = '<cmd>lua require(\\'dap\\').continue()<CR>', }, description = 'DAP: Continue', },"
      - "{ '<leader>dv', { n = '<cmd>lua require(\\'dap\\').step_over()<CR>', }, description = 'DAP: Step Over', },"
      - "{ '<leader>di', { n = '<cmd>lua require(\\'dap\\').step_into()<CR>', }, description = 'DAP: Step Into', },"
      - "{ '<leader>do', { n = '<cmd>lua require(\\'dap\\').step_out()<CR>', }, description = 'DAP: Step Out', },"
      - "{ '<leader>dr', { n = '<cmd>lua require(\\'dap\\').repl.open()<CR>', }, description = 'DAP: Open REPL', },"
      - "{ '<leader>dd', { n = '<cmd>lua require(\\'dapui\\').toggle()<CR>', }, description = 'DAP: Toggle Debugger UI', },"
      - "{ '<leader>dt', { n = '<cmd>Telescope dap commands<CR>', }, description = 'DAP: List DAP Commands', },"
      - "{ '<leader>dl', { n = '<cmd>Telescope dap list_breakpoints<CR>', }, description = 'DAP: List DAP Breakpoints', },"
      - "{ '<F5>', { n = '<cmd>lua require(\\'dap\\').continue()<CR>', }, description = 'DAP: Continue', },"
      - "{ '<F10>', { n = '<cmd>lua require(\\'dap\\').step_over()<CR>', }, description = 'DAP: Step Over', },"
      - "{ '<F11>', { n = '<cmd>lua require(\\'dap\\').step_into()<CR>', }, description = 'DAP: Step Into', },"
      - "{ '<F12>', { n = '<cmd>lua require(\\'dap\\').step_out()<CR>', }, description = 'DAP: Step Out', },"
nvim_extra_plugins: {}
nvim_startup_commands: |
  vim.cmd("WindowsDisableAutowidth")
nvim_xdg_profiles:
  musl:
    name: musl
# cosynvim:
#   name: cosynvim
# basicide:
#   name: basic-ide
# kickstart:
#   name: kickstart
