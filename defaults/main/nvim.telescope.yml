---
nvim_telescope_default:
  packer: |
    use { 'nvim-telescope/telescope-fzf-native.nvim',
      requires = {
        'nvim-telescope/telescope.nvim',
        'nvim-lua/plenary.nvim',
        'stevearc/dressing.nvim',
        'nvim-lua/popup.nvim',
        'TC72/telescope-tele-tabby.nvim',
        'sharkdp/fd',
      },
      run = 'make',
    }
    use { 'nvim-telescope/telescope-ui-select.nvim' }
    use { 'princejoogie/dir-telescope.nvim' }
    use { 'nvim-telescope/telescope-file-browser.nvim' }
  config: |
    require('dressing').setup()
    require('telescope').setup({
      defaults = {
        theme = 'dropdown',
        layout_config = {
          vertical = { width = 1.8 }
          -- other layout configuration here
        },
        mappings = {
          i = {
            ['<C-u>'] = false,
            ['<C-d>'] = false,
          },
        },
      },
      pickers = {
        find_files = {
          theme = 'dropdown',
          find_command = { '{{ fd_exe }}' },
          layout_config = {
            vertical = { width = 1.2 }
          },
        },
        buffers = {
          theme = 'ivy',
          layout_config = {
            vertical = { width = 1.8 }
          },
        }
      },
      extensions = {
        -- ['ui-select'] = {
        --   require('telescope.themes').get_dropdown {
        --     -- even more opts
        --   }
        --   -- pseudo code / specification for writing custom displays, like the one
        --   -- for 'codeactions'
        --   -- specific_opts = {
        --   --   [kind] = {
        --   --     make_indexed = function(items) -> indexed_items, width,
        --   --     make_displayer = function(widths) -> displayer
        --   --     make_display = function(displayer) -> function(e)
        --   --     make_ordinal = function(e) -> string
        --   --   },
        --   --   -- for example to disable the custom builtin 'codeactions' display
        --   --      do the following
        --   --   codeactions = false,
        --   -- }
        -- },
        tele_tabby = {
          use_highlighter = true,
        },
      }
    })
    require('telescope').load_extension('aerial')
    require('telescope').load_extension('dir')
    require('telescope').load_extension('fzf')
    require('telescope').load_extension('ui-select')
    require('telescope').load_extension('file_browser')
  keymaps: |
    { '<leader>ff', { n = '<cmd>lua require(\'telescope.builtin\').find_files()<CR>', }, description = 'Telescope: Find Files', },
    { '<leader>fb', { n = '<cmd>lua require(\'telescope.builtin\').buffers()<CR>', }, description = 'Telescope: Find Open Buffers', },
    { '<leader>fh', { n = '<cmd>lua require(\'telescope.builtin\').help_tags()<CR>', }, description = 'Telescope: Find Help Tags', },
    { '<leader>ft', { n = '<cmd>Telescope tele_tabby list<CR>', }, description = 'Telescope: Search Tabs', },
    { '<leader>fl', { n = '<cmd>Telescope aerial<CR>', }, description = 'Telescope: Search Aerial Document Symbols', },
    { '_', { n = '<cmd>lua require(\'telescope.builtin\').grep_string()<CR>', }, description = 'Telescope: Grep String(Cursor Word)', },
    { '<leader>e', { n = '<cmd>Telescope file_browser path=%:p:h<CR>', }, description = 'Telescope: File Browser(Current File)', },
    { '<leader>E', { n = '<cmd>Telescope file_browser<CR>', }, description = 'Telescope: File Browser(Root)', },
    { '<leader>q', { n = '<cmd>Telescope dir live_grep<CR>', }, description = 'Telescope: Selective Live Grep Project', },
    { '<leader>Q', { n = '<cmd>lua require(\'telescope.builtin\').live_grep()<CR>', }, description = 'Telescope: Live Grep Project', },
    { '<leader>/', { n = '<cmd>lua require(\'telescope.builtin\').current_buffer_fuzzy_find()<CR>', }, description = 'Telescope: Find in Current Buffer', },
    { '<leader>?', { n = '<cmd>lua require(\'telescope.builtin\').oldfiles()<CR>', }, description = 'Telescope: Old Files', },
