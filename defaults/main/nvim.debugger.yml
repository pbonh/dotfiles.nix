---
nvim_debugger_default:
  packer: |
    use { 'rcarriga/nvim-dap-ui', requires = { 'mfussenegger/nvim-dap' } }
    use { 'nvim-telescope/telescope-dap.nvim',
      requires = {
          {'mfussenegger/nvim-dap'},
          {'nvim-telescope/telescope.nvim'}
      }
    }
    use {  'theHamsta/nvim-dap-virtual-text',
      requires = {
          {'mfussenegger/nvim-dap'},
          {'nvim-treesitter/nvim-treesitter'}
      }
    }
  config: |
    local dap = require('dap')
    require('dapui').setup()
    require('nvim-dap-virtual-text').setup()
  keymaps: |
    { '<leader>db', { n = '<cmd>lua require(\'dap\').toggle_breakpoint()<CR>', }, description = 'DAP: Toggle Breakpoint', },
    { '<leader>dc', { n = '<cmd>lua require(\'dap\').continue()<CR>', }, description = 'DAP: Continue', },
    { '<leader>dv', { n = '<cmd>lua require(\'dap\').step_over()<CR>', }, description = 'DAP: Step Over', },
    { '<leader>di', { n = '<cmd>lua require(\'dap\').step_into()<CR>', }, description = 'DAP: Step Into', },
    { '<leader>do', { n = '<cmd>lua require(\'dap\').step_out()<CR>', }, description = 'DAP: Step Out', },
    { '<leader>dr', { n = '<cmd>lua require(\'dap\').repl.open()<CR>', }, description = 'DAP: Open REPL', },
    { '<leader>dd', { n = '<cmd>lua require(\'dapui\').toggle()<CR>', }, description = 'DAP: Toggle Debugger UI', },
    { '<leader>dt', { n = '<cmd>Telescope dap commands<CR>', }, description = 'DAP: List DAP Commands', },
    { '<leader>dl', { n = '<cmd>Telescope dap list_breakpoints<CR>', }, description = 'DAP: List DAP Breakpoints', },
    { '<F5>', { n = '<cmd>lua require(\'dap\').continue()<CR>', }, description = 'DAP: Continue', },
    { '<F10>', { n = '<cmd>lua require(\'dap\').step_over()<CR>', }, description = 'DAP: Step Over', },
    { '<F11>', { n = '<cmd>lua require(\'dap\').step_into()<CR>', }, description = 'DAP: Step Into', },
    { '<F12>', { n = '<cmd>lua require(\'dap\').step_out()<CR>', }, description = 'DAP: Step Out', },
nvim_debugger_nondap:
  packer: |
    use 'sakhnik/nvim-gdb'
  config: |
    vim.cmd([[ let g:nvimgdb_use_find_executables=0 ]])

    local telescope = require('telescope')
    local actions = require('telescope.actions')
    local function gdb_with_directory()
      require('telescope.builtin').find_files {
        prompt_title = "< GDB Directory Picker >",
        cwd = "./", -- You can customize this path
        hidden = false, -- Change to true if you want to see hidden directories

        attach_mappings = function(prompt_bufnr, map)
          map('i', '<CR>', function()
            local selection = actions.get_selected_entry()
            actions.close(prompt_bufnr)

            local dir_name = selection.value
            local cmd = "{{ gdb_bin }} -q --args program_exe " .. dir_name
            -- print("Running command: " .. cmd)
            -- vim.fn.system(cmd)
            vim.cmd('GdbStart ' .. cmd)
          end)

          return true
        end
      }
    end

    -- Bind the function to a key
    vim.api.nvim_set_keymap('n', '<leader>g', [[<cmd>lua gdb_with_directory()<cr>]], { noremap = true, silent = true })
  keymaps: |
    { '<leader>dd', { n = '<cmd>GdbStart {{ gdb_bin }} -q --args ./a.out arg1 arg2<CR>', }, description = 'Neovim-GDB: Start Debugger', },
    { '<leader>dt', { n = '<cmd>lua gdb_with_directory()<CR>', }, description = 'Neovim-GDB: Start Debugger in Directory', },
